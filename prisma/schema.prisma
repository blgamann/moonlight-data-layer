// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = "file:./moonlight.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  name            String?
  image           String? @map("profileImageUrl")
  bio             String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?

  bookshelfEntries BookshelfEntry[]
  answers          Answer[]

  expressedProfileInterests ProfileInterest[] @relation("ExpressedProfileInterests")
  expressedAnswerInterests  AnswerInterest[]  @relation("ExpressedAnswerInterests")
  receivedProfileInterests  ProfileInterest[] @relation("ReceivedProfileInterests")

  sentSoullinkRequests SoullinkRequest[] @relation("SentSoullinkRequests")
  receivedSoullinkRequests SoullinkRequest[] @relation("ReceivedSoullinkRequests")

  soulmatesAsUserA Soulmate[] @relation("UserASoulmates")
  soulmatesAsUserB Soulmate[] @relation("UserBSoulmates")

  notifications   Notification[]
}

model Book {
  id            String    @id @default(cuid())
  isbn          String    @unique
  title         String
  author        String
  publisher     String
  pubdate       String?
  image         String?
  link          String?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bookshelfEntries BookshelfEntry[]
  questions        Question[]
}

model BookshelfEntry {
  id       String   @id @default(cuid())
  userId   String
  bookIsbn String
  addedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookIsbn], references: [isbn], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, bookIsbn])
}

model Question {
  id        String   @id @default(cuid())
  bookIsbn  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book    Book     @relation(fields: [bookIsbn], references: [isbn], onDelete: Cascade, onUpdate: Cascade)
  answers Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  receivedAnswerInterests AnswerInterest[]
}

model ProfileInterest {
  id               String   @id @default(cuid())
  interestedUserId String
  targetUserId     String
  createdAt        DateTime @default(now())

  interestedUser User @relation("ExpressedProfileInterests", fields: [interestedUserId], references: [id], onDelete: Cascade)
  targetUser     User @relation("ReceivedProfileInterests", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([interestedUserId, targetUserId])
}

model AnswerInterest {
  id               String   @id @default(cuid())
  interestedUserId String
  targetAnswerId   String
  createdAt        DateTime @default(now())

  interestedUser User   @relation("ExpressedAnswerInterests", fields: [interestedUserId], references: [id], onDelete: Cascade)
  targetAnswer   Answer @relation(fields: [targetAnswerId], references: [id], onDelete: Cascade)

  @@unique([interestedUserId, targetAnswerId])
}

model SoullinkRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())

  sender   User @relation("SentSoullinkRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedSoullinkRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Soulmate {
  id        String   @id @default(cuid())
  userAId   String
  userBId   String
  createdAt DateTime @default(now())

  userA User @relation("UserASoulmates", fields: [userAId], references: [id], onDelete: Cascade)
  userB User @relation("UserBSoulmates", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
}

enum NotificationType {
  MUTUAL_PROFILE_INTEREST
  SOULMATE_FORMED
}

model Notification {
  id                String           @id @default(cuid())
  userId            String
  type              NotificationType
  content           String?
  relatedUserId     String?
  relatedBookIsbn   String?
  relatedQuestionId String?
  relatedAnswerId   String?
  relatedSoulmateId String?
  isRead            Boolean          @default(false)
  createdAt         DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}